import os
import asyncio
from aiohttp import web
from dotenv import load_dotenv

# === –ë–∞–∑–æ–≤–∏–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ===
async def handle(request):
    return web.Response(text="‚úÖ I'm alive!")

async def run_webserver():
    app = web.Application()
    app.router.add_get("/", handle)
    runner = web.AppRunner(app)
    await runner.setup()

    port = int(os.environ.get("PORT", 8080))  # –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –¥–ª—è Render
    site = web.TCPSite(runner, "0.0.0.0", port=port)
    await site.start()
    print(f"üåê Web server is running on port {port}")

# === Telegram Bot ===
from aiogram import Bot, Dispatcher, types
from aiogram.types import ChatPermissions
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage

load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
if not API_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä .env —Ñ–∞–π–ª –∞–±–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

@dp.message_handler(content_types=types.ContentType.NEW_CHAT_MEMBERS)
async def new_member(message: types.Message):
    chat = await bot.get_chat(message.chat.id)
    group_name = chat.title or "—Ü—è –≥—Ä—É–ø–∞"
    group_description = chat.description or ""

    for member in message.new_chat_members:
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=member.id,
            permissions=ChatPermissions(can_send_messages=False)
        )

        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("–¢–∞–∫, –¥–æ–¥–∞–π—Ç–µ –º–µ–Ω–µ —Ö—É—Ç—á—ñ—à!", callback_data=f"rule_{member.id}_yes"),
            types.InlineKeyboardButton("–ù—î—Ç", callback_data=f"rule_{member.id}_no")
        )

        message_text = f"""üëã –ü—Ä–∏–≤—ñ—Ç, {member.full_name}!

–¶–µ –≥—Ä—É–ø–∞ {group_name}{f". {group_description}" if group_description else ""}

üìå –°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —É —Ü—ñ–π –≥—Ä—É–ø—ñ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –≤–∏–∫–ª—é—á–Ω–æ –£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.

–ß–∏ –ø–æ–≥–æ–¥–∂—É—î—à—Å—è —Ç–∏ —ñ–∑ —Ü–∏–º –ø—Ä–∞–≤–∏–ª–æ–º —ñ —Ö–æ—á–µ—à –¥–æ—î–¥–Ω–∞—Ç–∏—Å—å?
"""

        await message.reply(message_text, reply_markup=keyboard)

@dp.callback_query_handler(lambda call: call.data.startswith("rule_"))
async def process_rule_answer(call: types.CallbackQuery):
    parts = call.data.split("_")
    user_id = int(parts[1])
    answer = parts[2]

    await call.answer()

    if call.from_user.id != user_id:
        try:
            await call.answer("–¶–µ –Ω–µ —Ç–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.", show_alert=True)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ alert: {e}")
        return

    if answer == "yes":
        await bot.restrict_chat_member(
            chat_id=call.message.chat.id,
            user_id=user_id,
            permissions=ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True
            )
        )
        await call.message.edit_text("‚úÖ –í—ñ—Ç–∞—é! –¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à –ø–∏—Å–∞—Ç–∏ —É –≥—Ä—É–ø—ñ. –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!")
    else:
        await call.message.edit_text("–ù–∞–∂–∞–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –ø–æ–≥–æ–¥–∏–≤—Å—è —ñ–∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏. –î–æ—Å—Ç—É–ø –¥–æ –≥—Ä—É–ø–∏ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        await bot.kick_chat_member(chat_id=call.message.chat.id, user_id=user_id)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ + –≤–µ–±—Å–µ—Ä–≤–µ—Ä –æ–¥–Ω–æ—á–∞—Å–Ω–æ ===
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(run_webserver())             # üß† HTTP keepalive
    executor.start_polling(dp, skip_updates=True) # ü§ñ Telegram –±–æ—Ç
