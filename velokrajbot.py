import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ChatPermissions
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
# from dotenv import load_dotenv

# load_dotenv()

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = os.getenv("BOT_TOKEN")

if not API_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä .env —Ñ–∞–π–ª –∞–±–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –û–±—Ä–æ–±–∫–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞
@dp.message_handler(content_types=types.ContentType.NEW_CHAT_MEMBERS)
async def new_member(message: types.Message):
    for member in message.new_chat_members:
        # –°–ø–æ—á–∞—Ç–∫—É –±–ª–æ–∫—É—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=member.id,
            permissions=ChatPermissions(can_send_messages=False)
        )

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("–¢–∞–∫, –¥–æ–¥–∞–π—Ç–µ –º–µ–Ω–µ —Ö—É—Ç—á—ñ—à!", callback_data=f"rule_{member.id}_yes"),
            types.InlineKeyboardButton("–ù—î—Ç", callback_data=f"rule_{member.id}_no")
        )

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏
        await message.reply(
            f"""üëã –ü—Ä–∏–≤—ñ—Ç, {member.full_name}!

–¶–µ –≥—Ä—É–ø–∞ üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Ü—ñ–≤ –≤ –ê–≤—Å—Ç—Ä—ñ—ó, —è–∫–∏—Ö –ø–æ–≤ º—è–∑—É—î —ñ–Ω—Ç–µ—Ä–µ—Å –¥–æ üö¥‚Äç –≤–µ–ª–æ—Å–∏–ø–µ–¥—ñ–≤.

üìå *–°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —É —Ü—ñ–π –≥—Ä—É–ø—ñ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –≤–∏–∫–ª—é—á–Ω–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.*

–ß–∏ –ø–æ–≥–æ–¥–∂—É—î—à—Å—è —Ç–∏ —ñ–∑ —Ü–∏–º –ø—Ä–∞–≤–∏–ª–æ–º —ñ —Ö–æ—á–µ—à –¥–æ—î–¥–Ω–∞—Ç–∏—Å—å?""",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

# –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞
@dp.callback_query_handler(lambda call: call.data.startswith("rule_"))
async def process_rule_answer(call: types.CallbackQuery):
    parts = call.data.split("_")
    user_id = int(parts[1])
    answer = parts[2]

    await call.answer()

    # –ó–∞–±–æ—Ä–æ–Ω—è—î–º–æ —ñ–Ω—à–∏–º –Ω–∞—Ç–∏—Å–∫–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏
    if call.from_user.id != user_id:
        try:
            await call.answer("–¶–µ –Ω–µ —Ç–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.", show_alert=True)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ alert: {e}")
        return

    await call.answer()

    if answer == "yes":
        # –î–æ–∑–≤–æ–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –ø–∏—Å–∞—Ç–∏
        await bot.restrict_chat_member(
            chat_id=call.message.chat.id,
            user_id=user_id,
            permissions=ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True
            )
        )
        await call.message.edit_text("‚úÖ –í—ñ—Ç–∞—é! –¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à –ø–∏—Å–∞—Ç–∏ —É –≥—Ä—É–ø—ñ. –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!")

    else:
        # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –≥—Ä—É–ø–∏
        await call.message.edit_text("–ù–∞–∂–∞–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –ø–æ–≥–æ–¥–∏–≤—Å—è —ñ–∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏. –î–æ—Å—Ç—É–ø –¥–æ –≥—Ä—É–ø–∏ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        await bot.kick_chat_member(chat_id=call.message.chat.id, user_id=user_id)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
